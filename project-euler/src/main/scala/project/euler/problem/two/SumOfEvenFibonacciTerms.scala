package project.euler.problem.two

import scala.annotation.tailrec

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
//4613732
object SumOfEvenFibonacciTerms extends App {
  val fibonacciSequence = getFibonacciSequence(List(1, 2))
  println(fibonacciSequence)
  val sumOfEven = fibonacciSequence.filter(_ % 2 == 0).reduce(_ + _)
  println(sumOfEven)

  @tailrec
  def getFibonacciSequence(xc: List[Int]): List[Int] = {
    if (xc.last > 4000000)
      xc.init
    else
      getFibonacciSequence(xc :+ (xc.last + xc.init.last))
  }
}